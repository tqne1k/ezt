// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckClient interface {
	SayHi(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type healthCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckClient(cc grpc.ClientConnInterface) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) SayHi(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/grpc.HealthCheck/SayHi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServer is the server API for HealthCheck service.
// All implementations must embed UnimplementedHealthCheckServer
// for forward compatibility
type HealthCheckServer interface {
	SayHi(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedHealthCheckServer()
}

// UnimplementedHealthCheckServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckServer struct {
}

func (UnimplementedHealthCheckServer) SayHi(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedHealthCheckServer) mustEmbedUnimplementedHealthCheckServer() {}

// UnsafeHealthCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServer will
// result in compilation errors.
type UnsafeHealthCheckServer interface {
	mustEmbedUnimplementedHealthCheckServer()
}

func RegisterHealthCheckServer(s grpc.ServiceRegistrar, srv HealthCheckServer) {
	s.RegisterService(&HealthCheck_ServiceDesc, srv)
}

func _HealthCheck_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HealthCheck/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).SayHi(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheck_ServiceDesc is the grpc.ServiceDesc for HealthCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _HealthCheck_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/model/ezt.proto",
}

// TunnelInfoClient is the client API for TunnelInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelInfoClient interface {
	GetTunnelInfo(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error)
}

type tunnelInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelInfoClient(cc grpc.ClientConnInterface) TunnelInfoClient {
	return &tunnelInfoClient{cc}
}

func (c *tunnelInfoClient) GetTunnelInfo(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error) {
	out := new(GetTunnelResponse)
	err := c.cc.Invoke(ctx, "/grpc.TunnelInfo/GetTunnelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelInfoServer is the server API for TunnelInfo service.
// All implementations must embed UnimplementedTunnelInfoServer
// for forward compatibility
type TunnelInfoServer interface {
	GetTunnelInfo(context.Context, *GetTunnelRequest) (*GetTunnelResponse, error)
	mustEmbedUnimplementedTunnelInfoServer()
}

// UnimplementedTunnelInfoServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelInfoServer struct {
}

func (UnimplementedTunnelInfoServer) GetTunnelInfo(context.Context, *GetTunnelRequest) (*GetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelInfo not implemented")
}
func (UnimplementedTunnelInfoServer) mustEmbedUnimplementedTunnelInfoServer() {}

// UnsafeTunnelInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelInfoServer will
// result in compilation errors.
type UnsafeTunnelInfoServer interface {
	mustEmbedUnimplementedTunnelInfoServer()
}

func RegisterTunnelInfoServer(s grpc.ServiceRegistrar, srv TunnelInfoServer) {
	s.RegisterService(&TunnelInfo_ServiceDesc, srv)
}

func _TunnelInfo_GetTunnelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelInfoServer).GetTunnelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TunnelInfo/GetTunnelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelInfoServer).GetTunnelInfo(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TunnelInfo_ServiceDesc is the grpc.ServiceDesc for TunnelInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TunnelInfo",
	HandlerType: (*TunnelInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTunnelInfo",
			Handler:    _TunnelInfo_GetTunnelInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/model/ezt.proto",
}
