<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Object Relations Graph</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        .node {
            stroke: #fff;
            stroke-width: 1.5px;
        }
        .center-node {
            stroke: yellow;
            stroke-width: 3px;
        }
        .link {
            stroke: #000;
            stroke-opacity: 0.6;
        }
        .strong {
            stroke-dasharray: 0;
        }
        .weak {
            stroke-dasharray: 5, 5;
        }
        text {
            font-family: sans-serif;
            font-size: 12px;
            fill: #000;
        }
        .popup {
            position: absolute;
            background-color: white;
            border: 1px solid #ccc;
            padding: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div id="menu-container"></div>
    <script src="/assets/menu.js"></script>
    <div id="popup" class="popup"></div>
    <script>
        // Dữ liệu mẫu cho objects và relations

        const objects = [];
        const relations = [];

        var interfaceId = {{.interfaceId}}
        {{range .tunnels}}
            objects.push({ id: {{.Interface.PrivateKey}}, name: {{.Interface.Name}}, avatar: "", info: "" })
            {{range .Peers}}
                console.log("Peer: {{.PublicKey}}");
                objects.push({ id: {{.PublicKey}}, name: {{.PublicKey}}, avatar: "", info: "" })
                relations.push({ source: interfaceId, target: {{.PublicKey}}, type: "strong", info: "" })
            {{end}}
        {{end}}

        // Tạo một đối tượng để tra cứu nodes từ id
        const nodes = {};
        objects.forEach(object => {
            nodes[object.id] = { id: object.id, name: object.name, avatar: object.avatar, info: object.info, center: object.center || false };
        });

        // Chuyển đổi quan hệ sang định dạng link
        const links = relations.map(relation => ({
            source: nodes[relation.source],
            target: nodes[relation.target],
            type: relation.type,
            info: relation.info
        }));

        const width = window.innerWidth;
        const height = window.innerHeight;

        const svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

        // Tạo nhóm cho tất cả các phần tử để có thể phóng to và thu nhỏ
        const container = svg.append("g");

        const zoom = d3.zoom()
            .scaleExtent([0.1, 4])
            .on("zoom", (event) => {
                container.attr("transform", event.transform);
            });

        svg.call(zoom);

        const simulation = d3.forceSimulation(Object.values(nodes))
            .force("link", d3.forceLink(links).id(d => d.id).distance(100))
            .force("charge", d3.forceManyBody().strength(-500))
            .force("center", d3.forceCenter(width / 2, height / 2));

        const link = container.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(links)
            .enter().append("line")
            .attr("class", d => d.type === 'strong' ? 'link strong' : 'link weak');

        const node = container.append("g")
            .attr("class", "nodes")
            .selectAll("g")
            .data(simulation.nodes())
            .enter().append("g")
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        node.append("rect")
            .attr("class", d => d.center ? 'node center-node' : 'node')
            .attr("width", d => d.center ? 50 : 40)
            .attr("height", d => d.center ? 50 : 40)
            .attr("x", d => d.center ? -25 : -20)
            .attr("y", d => d.center ? -25 : -20);

        node.append("image")
            .attr("xlink:href", d => d.avatar)
            .attr("x", d => d.center ? -25 : -20)
            .attr("y", d => d.center ? -25 : -20)
            .attr("width", d => d.center ? 50 : 40)
            .attr("height", d => d.center ? 50 : 40);

        node.append("text")
            .attr("dy", d => d.center ? 35 : 30)
            .attr("text-anchor", "middle")
            .text(d => d.name);

        simulation.on("tick", () => {
            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);

            node.attr("transform", d => `translate(${d.x},${d.y})`);
        });

        function dragstarted(event, d) {
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }

        function dragged(event, d) {
            d.fx = event.x;
            d.fy = event.y;
        }

        function dragended(event, d) {
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }

        // Cập nhật kích thước khi cửa sổ thay đổi kích thước
        window.addEventListener('resize', () => {
            const width = window.innerWidth;
            const height = window.innerHeight;
            svg.attr("width", width).attr("height", height);
            simulation.force("center", d3.forceCenter(width / 2, height / 2));
            simulation.alpha(1).restart();
        });

        // Popup để hiển thị thông tin chi tiết
        const popup = d3.select("#popup");

        function showPopup(content, x, y) {
            popup.html(content)
                .style("left", `${x}px`)
                .style("top", `${y}px`)
                .style("display", "block");
        }

        function hidePopup() {
            popup.style("display", "none");
        }

        // Xử lý sự kiện chuột phải trên các node
        node.on("contextmenu", (event, d) => {
            event.preventDefault();
            showPopup(d.info, event.pageX, event.pageY);
        });

        // Xử lý sự kiện chuột phải trên các link
        link.on("contextmenu", (event, d) => {
            event.preventDefault();
            showPopup(d.info, event.pageX, event.pageY);
        });

        // Ẩn popup khi bấm chuột trái ở bất kỳ đâu
        d3.select("body").on("click", hidePopup);

    </script>
</body>
</html>